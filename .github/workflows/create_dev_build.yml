name: CI process chain
run-name: ${{ github.actor }} running CI process on cix.x.x tag creation

on:
  workflow_dispatch:
  push:
    tags:
      - "ci*.*.*"

env:
  VERSION_TAG: ${{ github.ref_name }}

jobs:
  createReleaseTag:
    runs-on: windows-latest
    outputs:
      tag_name: ${{ steps.increment_version.outputs.NEW_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master

      - name: npm install
        run: npm install

      - name: Increment Patch Version
        id: increment_version
        run: |
          $version = "${{ env.VERSION_TAG }}"
          $newVersion = "$version".replace("ci","v")
          "NEW_VERSION=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "NEW_VERSION=$newVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: test output
        run: |
          echo "VERSION_TAG is ${{ env.VERSION_TAG }}"
          echo "NEW_VERSION is ${{ steps.increment_version.outputs.NEW_VERSION }}"
        shell: pwsh

      - name: Build and commit updated docs
        run: |
          cd docs/apidocs
          node readmebuilder.mjs
          cd ../..
          git config --global user.email "silenusta@gmail.com"
          git config --global user.name "SilenusTA"
          foreach ($line in Get-Content .\docs\apidocs\filelist.txt) { git add $line }
          git commit -m "autodoc readme update"
          git push
        shell: pwsh

      - name: Push new version tag
        run: |
          git tag ${{ steps.increment_version.outputs.NEW_VERSION }}
          git push origin --tags
        shell: pwsh

  CreateGitHubRelease:
    needs: createReleaseTag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get previous release notes
        id: get-previous-release
        shell: bash
        run: |
          REPO="${{ github.repository }}"
          PREV_RELEASE=$(gh release list --repo "$REPO" --limit 1 --json tagName --jq '.[0].tagName')
          NOTES=$(gh release view "$PREV_RELEASE" --repo "$REPO" --json body --jq '.body')
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.createReleaseTag.outputs.tag_name }}
          body: ${{ steps.get-previous-release.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  BuildRelease:
    needs: createReleaseTag
    uses: ./.github/workflows/create_dev_build.yml
    with:
      tag: ${{ needs.createReleaseTag.outputs.tag_name }}

  UpdateDocs:
    needs: [BuildRelease, createReleaseTag]
    uses: ./.github/workflows/build_docs.yml
    with:
      tag: ${{ needs.createReleaseTag.outputs.tag_name }}
    secrets: inherit
