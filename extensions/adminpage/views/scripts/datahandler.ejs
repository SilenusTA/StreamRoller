<!--
      StreamRoller_source Copyright 2023 "SilenusTA https://www.twitch.tv/olddepressedgamer"
 
      StreamRoller is an all in one streaming solution designed to give a single
      'second monitor' control page and allow easy integration for configuring
      content (ie. tweets linked to chat, overlays triggered by messages, hue lights
      controlled by donations etc)
 
      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU Affero General Public License as published
      by the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
 
      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Affero General Public License for more details.
 
      You should have received a copy of the GNU Affero General Public License
      along with this program.  If not, see <https://www.gnu.org/licenses/>.
 
-->
<script src="/streamroller-message-api.cjs"></script>
<%- include("../modals/settingswidgetsmallplaceholder.html"); %>
<%- include("../modals/settingsplaceholdermodal"); %>
<%- include("../modals/credentialsplaceholdermodal"); %>
<script>
    // sets the window name for future target loads
    window.name = '_StreamRoller'
    const serverConfig = {
        extensionname: "adminpage",
        channel: "ADMIN_PAGE",
        logginglevel: "0"
    };
    const localConfig =
    {
        heartBeatTimeout: "6000"
    }
    // will hold the data center socket needed to send receive data
    // after refactoring the code this should hopefully not be needed anymore
    let DataCenterSocket = null;

    // DEBUGGING - Set this to true if you need your server data to be refreshed from above.
    // during development you may find your server data gets messed up if changing it often.
    // while uncommented your data will not presist and be overwritten by the above config
    // every time the server runs up.

    const OverwriteDataCenterConfig = false;

    // This is used to refresh the page on a new extension list
    // Currently if a second list comes in the submit handlers for the forms get broken
    // and any form submitted will cause an error.
    let bugfix_extensionlist_count = 0;

    //global data store for the app
    const adminData = {};
    adminData.extensions = {};
    // add our own extension card in to the display as we won't get a request from ourselves
    adminData.extensions[serverConfig.extensionname] = { admincard: document.getElementById('settingswidgetsmallplaceholder').innerHTML };
    UpdateSettingsWidgetSmallData();
    adminData.channellist = {};
    var host = '<%= host %>';
    var port = '<%= port %>';
    localConfig.heartBeatTimeout = parseInt('<%= heartbeat %>') + 1000;
    ConnectToDataCenter(host, port)

    // ============================================================================
    //                           FUNCTION: ConnectToDataCenter
    // ============================================================================
    // Description: Connect to the data center socket
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function ConnectToDataCenter (host, port)
    {
        try
        {
            DataCenterSocket = sr_api.setupConnection(onDataCenterMessage, onDataCenterConnect, onDataCenterDisconnect, host, port)
        } catch (err)
        {
            console.log("datahandler.initialise", "DataCenterSocket connection failed:", err);
        }
    }
    // ============================================================================
    //                           FUNCTION: onDataCenterDisconnect
    // ============================================================================
    // Description: Received disconnect message
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function onDataCenterDisconnect (reason)
    {
        console.log("datahandler.onDataCenterDisconnect", reason);
    }
    // ============================================================================
    //                           FUNCTION: onDataCenterConnect
    // ============================================================================
    // Description: Received connect message
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function onDataCenterConnect ()
    {
        //console.log("datahandler.onDataCenterConnect", "Registering our channel and requesting channel and extension list");
        // DEBUGGING overwrite our config data on the server if the flag is set
        if (OverwriteDataCenterConfig)
            SaveConfigToServer();
        else
            sr_api.sendMessage(DataCenterSocket,
                sr_api.ServerPacket(
                    "RequestConfig",
                    serverConfig.extensionname
                ));

        //register our channels
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "CreateChannel",
                serverConfig.extensionname,
                serverConfig.channel
            ));
        //request software version
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "RequestSoftwareVersion",
                serverConfig.extensionname,
                serverConfig.channel
            ));
        //Request lists once up and running, we delay a while so other extensions can load
        setTimeout(() =>
        {
            RequestChList();
            RequestExtList();
        }, 2000);
    }
    // ============================================================================
    //                           FUNCTION: onDataCenterMessage
    // ============================================================================
    // Description: Received message
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function onDataCenterMessage (server_packet)
    {
        // -------------------------------------------------------------------------------------------------
        //                  RECEIVED CONFIG
        // -------------------------------------------------------------------------------------------------
        if (server_packet.type === "ConfigFile")
        {
            //("datahandler.onDataCenterMessage", server_packet.type + " for " + server_packet.to);
            // update our config
            if (server_packet.data != "")
                // check it is our config
                if (server_packet.to === serverConfig.extensionname)
                {
                    for (const [key, value] of Object.entries(serverConfig))
                        if (key in server_packet.data)
                            serverConfig[key] = server_packet.data[key];
                    // update our modal to match the new data
                    UpdateSettingsWidgetSmallData();
                    //update the logging on the server
                    SaveConfigToServer();
                }
        }
        // -------------------------------------------------------------------------------------------------
        //                  RECEIVED CHANNEL LIST
        // -------------------------------------------------------------------------------------------------
        else if (server_packet.type === "ChannelList")
        {
            // console.log("datahandler.onDataCenterMessage", server_packet.type + " received");
            adminData.channellist = server_packet.data;
            var html = "<ul>";
            for (var i = 0; i < adminData.channellist.length; i++)
            {
                html += "<li>" + adminData.channellist[i] + "</li>";
            }
            html += "</ul>";
            document.getElementById("ChannelsListCard").getElementsByClassName("card-title")[0].innerHTML = "ChannelsList";
            document.getElementById("ChannelsListCard").getElementsByClassName("card-text")[0].innerHTML = html;
            // register to all channels that are available.
            adminData.channellist.forEach(element =>
            {
                sr_api.sendMessage(DataCenterSocket,
                    sr_api.ServerPacket(
                        "JoinChannel",
                        serverConfig.extensionname,
                        element
                    ));

            });
        }
        // -------------------------------------------------------------------------------------------------
        //                   RECEIVED EXTENSION LIST
        // -------------------------------------------------------------------------------------------------
        else if (server_packet.type === "ExtensionList")
        {
            if (server_packet.to === serverConfig.extensionname)
            {
                //console.log("datahandler.onDataCenterMessage", server_packet.type + " received");
                // we need to reload the page if we receive more than one list due to callback handler isses
                // on the form
                if (bugfix_extensionlist_count > 1)
                    location.reload();
                else
                    bugfix_extensionlist_count++;
                //load extension cards
                loadExtensionCards(server_packet.data);
            }
        }
        // -------------------------------------------------------------------------------------------------
        //                   RECEIVED EXTENSION LIST
        // -------------------------------------------------------------------------------------------------
        else if (server_packet.type === "LoggingLevel")
        {
            serverConfig.logginglevel = server_packet.data
            UpdateSettingsWidgetSmallData();
            //send modal to everyone to update their own copies of out model
            SendModal("");
        }
        // -------------------------------------------------------------------------------------------------
        //                  RECEIVED LOGGING LEVEL
        // -------------------------------------------------------------------------------------------------
        else if (server_packet.type === "SoftwareVersion")
        {
            document.getElementById("softwareversion").innerHTML = server_packet.data;
        }
        else if (server_packet.type === "ExtensionMessage")
        {
            extension_packet = server_packet.data
            //console.log(".onDataCenterMessage", "ExtensionMessage ", extension_packet.type);
            // -------------------------------------------------------------------------------------------------
            //                   RECEIVED SETTINGS WIDGET SMALL REQUEST
            // -------------------------------------------------------------------------------------------------
            if (extension_packet.type === "RequestSettingsWidgetSmallCode")
            {
                //console.log("datahandler.onDataCenterMessage", extension_packet.type + " from " + extension_packet.from);
                SendModal(extension_packet.from, extension_packet.data);
            }
            // -------------------------------------------------------------------------------------------------
            //                   RECEIVED EXTENSION MODAL CODE
            // -------------------------------------------------------------------------------------------------
            else if (extension_packet.type === "SettingsWidgetSmallCode")
            {
                // we process our own submits so don't do anything with the updates we send out if they come 
                // back to us
                if (extension_packet.from != serverConfig.extensionname)
                    addModal(extension_packet.from, extension_packet.data, "SettingsPlaceholder", "admincard");
            }
            // -------------------------------------------------------------------------------------------------
            //                   RECEIVED EXTENSION CREDENTIALS MODAL CODE
            // -------------------------------------------------------------------------------------------------
            else if (extension_packet.type === "CredentialsModalCode")
                addModal(extension_packet.from, extension_packet.data, "CredentialsPlaceholder", "credentialscard");
            // -------------------------------------------------------------------------------------------------
            //                   RECEIVED MODAL DATA (someone hit submit on a dialog)
            // -------------------------------------------------------------------------------------------------
            else if (extension_packet.type === "SettingsWidgetSmallData")
            {
                // check that this is not from us.
                // we process our own submits so do'nt do anything with the updates we send out if they come
                // back to us
                if (extension_packet.from != serverConfig.extensionname)
                {
                    // lets reset our config checkbox settings (modal will omit ones not
                    // checked in checkboxes so set them to "off" here first if you have them)
                    // set our config values to the ones in message
                    for (const [key, value] of Object.entries(extension_packet.data))
                        serverConfig[key] = value;
                    // save our data to the server for next time we run
                    SaveConfigToServer();
                    changeServerLogging(serverConfig.logginglevel)
                    //lets update our modal
                    UpdateSettingsWidgetSmallData();
                }
            }
            else
                console.log(".onDataCenterMessage", "ExtensionMessage not handled ", extension_packet.type, " from ", extension_packet.from);
        }
        else if (server_packet.type === "ChannelData")
        {
            // -------------------------------------------------------------------------------------------------
            //                           HEATBEAT
            // -------------------------------------------------------------------------------------------------
            let extension_packet = server_packet.data;
            if (extension_packet.type === "HeartBeat")
            {
                //check if we have this extension
                if (typeof (adminData.extensions[extension_packet.from]) !== "undefined")
                {
                    //clear the previous timeout handle
                    clearTimeout(adminData.extensions[extension_packet.from].heartBeatHandle);
                    // setup a new timeout for this extension
                    adminData.extensions[extension_packet.from].heartBeatHandle = setTimeout(() => 
                    {
                        heartBeatCallback(extension_packet.from)
                    },
                        localConfig.heartBeatTimeout);

                    // set the on screen status for this extension
                    setExtensionStatus(extension_packet.from, extension_packet.data.connected)

                }
            }
            else if (server_packet.dest_channel == "TWITCH_CHAT")
            {
                if (extension_packet.type === "ChatMessage")
                    displayChatMessages(extension_packet);
            } else
            {
                //log messages to screen
                displayChannelMessages(server_packet);
            }
        } else if (server_packet.type === "UnknownChannel")
        {
            //channel might not exist yet, extension might still be starting up so lets rescehuled the join attempt
            // need to add some sort of flood control here so we are only attempting to join one at a time
            if (server_packet.data.message.dest_channel != "")
            {
                console.log(".onDataCenterMessage", "Channel " + server_packet.channel + " doesn't exist, scheduling rejoin");
                setTimeout(() =>
                {
                    sr_api.sendMessage(DataCenterSocket,
                        sr_api.ServerPacket(
                            "JoinChannel",
                            serverConfig.extensionname,
                            server_packet.data.message.dest_channel
                        ));
                }, 10000);
            }
            else
                console.log(".onDataCenterMessage", "Channel " + server_packet.channel + " doesn't exist, skipping rejoin (extension has probably not started up and created a channel yet");

        } else if (server_packet.type === "ChannelJoined"
            || server_packet.type === "ChannelCreated"
            || server_packet.type === "ChannelLeft"
        )
        {
            // just a blank handler for items we are not using to avoid message from the catchall
        }
        // ------------------------------------------------ unknown message type received -----------------------------------------------
        else
            console.warn(".onDataCenterMessage", "Unhandled message type", server_packet.type);
        displayChannelMessages(server_packet);
    }
    // ============================================================================
    //                           FUNCTION: heartBeatCallback
    // ============================================================================
    // Description: started when we get a heartbeat and used to mark teh extension as down if it expires
    // Parameters: extension name and the state (true fals to represent status)
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function heartBeatCallback (extensionname)
    {
        setExtensionStatus(extensionname, false);
    }
    // ============================================================================
    //                           FUNCTION: SaveConfigToServer
    // ============================================================================
    // Description:save config on backend data store
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function SaveConfigToServer ()
    {
        // saves our serverConfig to the server so we can load it again next time we startup
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "SaveConfig",
                serverConfig.extensionname,
                serverConfig,
            ));
    }
    // ============================================================================
    //                           FUNCTION: loadExtensionCards
    // ============================================================================
    // Description: display message in allmessages card
    // Parameters: list of extension names
    // ----------------------------- notes ----------------------------------------
    // There is a bug here. If the backend restarts and the page isn't 
    // refreshed then any callbacks from the froms will fail. fix was to 
    // force a fresh of the page when a new extension list comes in. Not very
    // smooth :(
    // ===========================================================================
    function loadExtensionCards (extensions)
    {

        extensions.sort()
        // First we create all the links (these may be changed below if the extension has provided a modal box)
        var html = "<div>";
        for (var i = 0; i < extensions.length; i++)
        {
            html += "<div id='" + extensions[i] + "_visibility_admincard' style='display: block;'><span id='" + extensions[i] + "_status' class='extensioncardicon'>&#x2B24</span>";
            html += " <span id='" + extensions[i] + "_admincard'>"
            html += extensions[i] + "</span></div>";
            // check if we have previously recorded this extension, if not we should add it
            if (!adminData.extensions[extensions[i]])
                adminData.extensions[extensions[i]] = { hasmodel: false };
            RequestSettingsWidgetSmallsCode(extensions[i]);
        };
        //html += "</ul>";
        html += "</div>";

        // create our Settings list element
        document.getElementById("SettingsListCard").getElementsByClassName("card-title")[0].innerHTML = "Settings Links";
        document.getElementById("SettingsListCard").getElementsByClassName("card-text")[0].innerHTML = html;

        // lets check if we have a previous settingswidgetsmall card for this extension and if so add it to the link above
        for (var i = 0; i < extensions.length; i++)
            if (adminData.extensions[extensions[i]].admincard)
                addModal(extensions[i], adminData.extensions[extensions[i]].admincard, "SettingsPlaceholder", "admincard")



        /*
                    CREDENTIALS CARDS
        */
        var html = "<div>";
        for (var i = 0; i < extensions.length; i++)
        {
            html += "<div id='" + extensions[i] + "_visibility_credentialscard' style='display: none;'><span id='" + extensions[i] + "_status' class='extensioncardicon'>&#x2B24</span>";
            html += "<span id='" + extensions[i] + "_credentialscard' >"
            html += extensions[i] + "</span></div>";
            // check if we have previously recorded this extension, if not we should add it
            if (!adminData.extensions[extensions[i]])
                adminData.extensions[extensions[i]] = { hasmodel: false };
            RequestCredentialsModalsCode(extensions[i]);
        };
        //html += "</ul>";
        html += "</div>";
        // create our Credentials list element
        document.getElementById("CredentialsListCard").getElementsByClassName("card-title")[0].innerHTML = "Credentials links";
        document.getElementById("CredentialsListCard").getElementsByClassName("card-text")[0].innerHTML = html;

        // lets check if we have a previous settingswidgetsmall card for this extension and if so add it to the link above
        for (var i = 0; i < extensions.length; i++)
            if (adminData.extensions[extensions[i]].credentialscard)
                addModal(extensions[i], adminData.extensions[extensions[i]].credentialscard, "SettingsPlaceholder", "credentialscard")

    }
    // ===========================================================================
    //                           FUNCTION: SendModal
    // ===========================================================================
    // Description: Send the modal code back after setting the defaults according 
    // to our server settings
    // Parameters: channel to send data to
    // ----------------------------- notes ---------------------------------------
    // none
    // ===========================================================================
    function SendModal (toextension)
    {

        let modalstring = adminData.extensions[serverConfig.extensionname].admincard;
        // first lets update our modal to the current settings
        for (const [key, value] of Object.entries(serverConfig))
        {
            // true values represent a checkbox so replace the "[key]checked" values with checked
            if (value === "on")
            {
                modalstring = modalstring.replace(key + "checked", "checked");
            }   //value is a string then we need to replace the text
            else if (typeof (value) == "string")
                modalstring = modalstring.replaceAll('"' + key + 'text"', '"' + value + '"');
        }
        // send the modal data to the server
        // send the modal data to the server
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "ExtensionMessage",
                serverConfig.extensionname,
                sr_api.ExtensionPacket(
                    "SettingsWidgetSmallCode",
                    serverConfig.extensionname,
                    modalstring,
                    "",
                    toextension
                ),
                "",
                toextension
            ));
    }
    // ============================================================================
    //                           FUNCTION: addModal
    // ============================================================================
    // Description: Add the admin code from the extension to the link
    // Parameters: 
    //          xname - name of extension
    //          data  - data to add
    //          placeholdername - name of tag to use as the placeholder
    //          cardtype - used to create the array item name in adminData.extensions[x][cardtype]
    // ----------------------------- notes ----------------------------------------
    // None
    // ===========================================================================
    function addModal (xname, data, placeholdername, cardtype)
    {
        // only update modals if we have received the extension name from the server
        if (adminData.extensions[xname])
        {

            let modalbox = document.getElementById(placeholdername).children[0];
            if (document.getElementById(xname + "_" + cardtype) == null)
                return
            // grab the <li> element for this extension
            let extLiTag = document.getElementById(xname + "_" + cardtype);


            // remove the previous event listener (if there was one)
            $('#' + xname + "_modal_" + cardtype).off('submit');
            //set the element contents to a blank extension placeholder
            // if we have already set this element to the placeholder page we don't want to do it again
            // otherwise it will replace the submit callback and throw an error when updated a second time.
            if (extLiTag.innerHTML === xname)
                extLiTag.innerHTML = modalbox.innerHTML;
            // setup the link to show the dialog
            extLiTag.getElementsByClassName("ext-modal-link")[0].href = "#" + xname + "_modal_" + cardtype;
            extLiTag.getElementsByClassName("ext-modal-link")[0].innerHTML = xname;
            extLiTag.getElementsByClassName("modal")[0].id = xname + "_modal_" + cardtype;
            // set the data from the extension
            document.getElementById(xname + "_modal_" + cardtype).innerHTML = data;
            // add a callback handle if we are not a credentias modal (this will be done inside the modal using CredentialsSubmit() function)
            if (cardtype != "credentialscard")
            {
                $('#' + xname + "_modal_" + cardtype).on('submit', function (event)
                {
                    event.preventDefault();
                    // if it is our own modal that has changed (another page has submitted one
                    // we need to process it ourselves first
                    if (xname == serverConfig.extensionname)
                    {
                        processOwnModalSubmit(xname);
                        // now it is processed we can parse it and send the data out to other who
                        // migh have it on their page
                        parseExtensionModalData(xname);
                    }
                    else
                        parseExtensionModalData(xname);
                    return false;
                });
            }

            //
            document.getElementById(xname + "_visibility_" + cardtype).style.display = "block"
            adminData.extensions[xname][cardtype] = document.getElementById(xname + "_" + cardtype).innerHTML
        }
        refreshDarkMode()
    }
    // ============================================================================
    //                           FUNCTION: setExtensionStatus
    // ============================================================================
    function setExtensionStatus (extension, connected)
    {
        if (connected == true)
            document.getElementById(extension + "_status").style = "color:green";
        else
            document.getElementById(extension + "_status").style = "color:red";
    }
    // ============================================================================
    //                           FUNCTION: ParseOBSScenesList
    // ============================================================================
    function ParseOBSScenesList (data)
    {
        let primaryScenes = data.main;
        let secondaryScenes = data.secondary;
        let restScenes = data.rest;
        let foundmutedscene = false;
        // remove the existing buttons
        var element = document.getElementById("OBSButtons");
        //remove the old buttons
        element.textContent = ""
        //store the data incase the user updated what they want to display
        localConfig.OBSSceneslist = data;

        // always show the primary scene list
        if (typeof (primaryScenes) !== "undefined")
        {
            primaryScenes.forEach((scene) => 
            {
                addOBSSceneButton(element, scene.displayName, scene.sceneName, data.current);
                if (scene.displayName === serverConfig.mutescene)
                {
                    foundmutedscene = true;
                    addOBSMuteButton(scene.muted);
                }
            });
        }
        // if we have all or secondory selected to show then show them
        if (typeof (secondaryScenes) !== "undefined" && (serverConfig.showallscenes === "on" || serverConfig.showsecondaryscenes === "on"))
        {
            secondaryScenes.forEach((scene) => 
            {
                addOBSSceneButton(element, scene.displayName, scene.sceneName, data.current);
                if (scene.displayName === serverConfig.mutescene)
                {
                    foundmutedscene = true;
                    addOBSMuteButton(scene.muted);
                }
            });
        }
        // only show remaining scenes if all is set
        if (typeof (restScenes) !== "undefined" && serverConfig.showallscenes === "on")
        {
            restScenes.forEach((scene) => 
            {
                addOBSSceneButton(element, scene.displayName, scene.sceneName, data.current)
                if (scene.displayName === serverConfig.mutescene)
                {
                    foundmutedscene = true;
                    addOBSMuteButton(scene.muted);
                }
            })
            // Add mute button
        }
        if (!foundmutedscene)
            addOBSMuteButton(serverConfig.muted);
        // check if we are live and set the colours accordingly.
        OBSLiveCheck();
    }
    // ============================================================================
    //                      FUNCTION: parseExtensionModalData
    // ============================================================================
    // Description: This function will retireve the data from the modal and 
    // send the push the data out so others can update theirs to reflect the change
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // None
    // ===========================================================================
    function parseExtensionModalData (extension)
    {
        let fieldsAsArray = $('#' + extension + "_modal_admincard").serializeArray();
        // convert our array of objects into a more usable objet
        var fieldsAsObject = fieldsAsArray.reduce((obj, item) => (obj[item.name] = item.value, obj), {});
        if (fieldsAsObject.extensionname)
            sr_api.sendMessage(DataCenterSocket,
                sr_api.ServerPacket(
                    "ExtensionMessage",
                    serverConfig.extensionname,
                    sr_api.ExtensionPacket(
                        fieldsAsObject.modaldatatype,
                        serverConfig.extensionname,
                        fieldsAsObject,
                        "",
                        fieldsAsObject.extensionname),
                    "",
                    fieldsAsObject.extensionname
                ));

    }
    // ============================================================================
    //                      FUNCTION: UpdateSettingsWidgetSmallData
    // ============================================================================
    // Description: Update our own modal if our config has changed
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // 
    // ===========================================================================
    function UpdateSettingsWidgetSmallData ()
    {
        let modalstring = document.getElementById("settingswidgetsmallplaceholder").innerHTML;
        for (const [key, value] of Object.entries(serverConfig))
        {
            // checkboxes
            if (value === "on")
                modalstring = modalstring.replace(key + "checked", "checked");
            // replace text strings
            else if (typeof (value) == "string" || typeof (value) == "number")
                modalstring = modalstring.replace('"' + key + 'text"', '"' + value + '"');
        }
        adminData.extensions[serverConfig.extensionname].admincard = modalstring;
        addModal(serverConfig.extensionname, modalstring, "SettingsPlaceholder", "admincard")

    }
    // ============================================================================
    //                      FUNCTION: processOwnModalSubmit
    // ============================================================================
    // Description: This function will retireve the data from the modal and 
    // send save it in the serverConfig after we hit the submit button
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // None
    // ===========================================================================
    function processOwnModalSubmit (name)
    {
        // get the modal data as an array
        let fieldsAsArray = $('#' + name + "_modal_admincard").serializeArray();
        // convert our array of objects into a more usable object
        var fieldsAsObject = fieldsAsArray.reduce((obj, item) => (obj[item.name] = item.value, obj), {});

        if (fieldsAsObject.logginglevel != "null")
        {
            // change server logging level
            changeServerLogging(fieldsAsObject.logginglevel);
            // change our logging level (probably should be a separate option)
            G_LOGLEVEL = fieldsAsObject.logginglevel;
        }
        // loop though our keys and set them to match what is in the modal
        for (const [key, value] of Object.entries(serverConfig))
        {
            if (value === "on" && !fieldsAsObject[key])
                serverConfig[key] = "off";
            if (key in fieldsAsObject)
                serverConfig[key] = fieldsAsObject[key];
        }
        //save the data to the server
        SaveConfigToServer();
    }
    // ============================================================================
    //                           FUNCTION: changeServerLogging
    // ============================================================================
    // Description: display message in allmessages card
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // ----------------------------------------------------------------------------
    function changeServerLogging (logsetting)
    {
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "SetLoggingLevel",
                serverConfig.extensionname,
                logsetting,
            ));
    }
    // ============================================================================
    //                           FUNCTION: Display channel message
    // ============================================================================
    // Description: display message in allmessages card
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    /*  data currently available from a tag.
          tags {
                'badge-info': null,
            badges: null,
            'client-nonce': 'fbd0d5f051f84cde74c882b377509a8c',
            color: '#00FF7F',
            'display-name': 'wizardmitts',
            emotes: null,
            'first-msg': false,
            flags: null,
            id: '826cc240-67d5-45f3-a0cd-4ea792a96e50',
            mod: false,
            'room-id': '81687332',
            subscriber: false,
            'tmi-sent-ts': '1644530043690',
            turbo: false,
            'user-id': '141477605',
            'user-type': null,
            'emotes-raw': null,
            'badge-info-raw': null,
            'badges-raw': null,
            username: 'wizardmitts',
            'message-type': 'chat'
                }*/

    // ============================================================================
    //                           FUNCTION: displayChatMessages
    // ============================================================================
    function displayChatMessages (data)
    {
        let chatdata = data.data;
        let cardref = document.getElementById("ChatMessagesCardText")
        let today = new Date();
        let message = "";
        let time = today.getHours() + ":" + String(today.getMinutes()).padStart(2, '0') + ":" + String(today.getSeconds()).padStart(2, '0');
        // make it colourful
        var timecolor = "<span style='color: #757875'>";
        var usercolor = "<span style='color: " + chatdata.data.color + "'>"
        if (chatdata.data["message-type"] != "chat")
        {
            usercolor = "<span style='color: yellow'>";
            message = chatdata.data["message-type"] + ": " + message
        }

        let username = usercolor + ' ' + chatdata.data["display-name"] + "&gt</span>";
        time = timecolor + time + ":</span>";

        cardref.innerHTML = time + ":" + username + " " + chatdata.message + "<BR>" + cardref.innerHTML;
    }
    // ============================================================================
    //                           FUNCTION: Display channel message
    // ============================================================================
    // Description: display message in allmessages card
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // None
    // ===========================================================================
    function displayChannelMessages (data)
    {
        let cardref = document.getElementById("MessagesCardText");
        let today = new Date();
        let time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
        let msgoutput = time;


        if (data.type === "ExtensionMessage")
        {
            let extension_packet = data.data;
            if (extension_packet.type == "SettingsWidgetSmallCode")
                cardref.innerHTML += msgoutput + "[" + extension_packet.from + "]" + " received SETTINGS WIDGET SMALL Code<BR>";
            else
                cardref.innerHTML += msgoutput + "[" + extension_packet.from + "] " + extension_packet.type + "<BR>";
        }
        else if (data.type === "ChannelData")
        {
            if (data.data.type === "HeartBeat")
            {
                // ignore heartbeat messages
            }
            else
            {
                if (data.dest_channel === "TWITCH_CHAT")
                    return; // displayed by the chat window
                let extension_packet = data.data;
                if (data.dest_channel === "STREAMLABS_ALERT")
                    cardref.innerHTML += msgoutput + "[" + extension_packet.from + "] " + extension_packet.type + "<BR>";
                else if (data.dest_channel === "DISCORD_CHAT")
                    cardref.innerHTML += msgoutput + "[" + extension_packet.from + "] " + extension_packet.data + "<BR>";
                else
                    cardref.innerHTML += msgoutput + "[" + extension_packet.from + "] " + extension_packet.type + "<BR>";
            }
        } else
        {
            msgoutput = msgoutput + "[" + data.from + "]" + "[" + data.type + "]:";
            cardref.innerHTML += msgoutput + "<BR>";
        }
    }
    // ============================================================================
    //                           FUNCTION: RequestExtList
    // ============================================================================
    // Description: Sends a message to the data center to get the list of extensions
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function RequestExtList ()
    {
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "RequestAllExtensionsList",
                serverConfig.extensionname,
            ));
    }
    // ============================================================================
    //                           FUNCTION: RequestChList
    // ============================================================================
    // Description: Sends a message to the data center to get the list of channels
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function RequestChList ()
    {
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "RequestChannelsList",
                serverConfig.extensionname,
            ));
    }
    // ============================================================================
    //                           FUNCTION: RequestSettingsWidgetSmallsCode
    // ============================================================================
    // Description: Request the SETTINGS WIDGET SMALL code from an extension
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function RequestSettingsWidgetSmallsCode (extname)
    {
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket("ExtensionMessage",
                serverConfig.extensionname,
                sr_api.ExtensionPacket(
                    "RequestSettingsWidgetSmallCode",
                    serverConfig.extensionname,
                    "",
                    "",
                    extname),
                "",
                extname
            ));
    }
    // ============================================================================
    //                           FUNCTION: RequestCredentialsModalsCode
    // ============================================================================
    // Description: Request the SETTINGS WIDGET SMALL code from an extension
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function RequestCredentialsModalsCode (extname)
    {
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket("ExtensionMessage",
                serverConfig.extensionname,
                sr_api.ExtensionPacket(
                    "RequestCredentialsModalsCode",
                    serverConfig.extensionname,
                    "",
                    "",
                    extname),
                "",
                extname
            ));
    }
    // ============================================================================
    //                           FUNCTION: CredentialsSubmit
    // ============================================================================
    // Description: Credential string was submitted
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function CredentialsSubmit (event)
    {
        // sercurity notes.
        event.preventDefault();

        //let fieldsAsArray = $('#' + name + "_modal").serializeArray();
        let fieldsAsArray = $(event.srcElement).serializeArray();
        // convert our array of objects into a more usable object
        var fieldsAsObject = fieldsAsArray.reduce((obj, item) => (obj[item.name] = item.value, obj), {});

        for (i = 1; i <= fieldsAsObject.credentialscount; i++)
        {
            if (fieldsAsObject["cred" + i + "name"] != "null" && fieldsAsObject["cred" + i + "value"] != "null" &&
                fieldsAsObject["cred" + i + "name"] != "" && fieldsAsObject["cred" + i + "value"] != "")
            {
                sr_api.sendMessage(DataCenterSocket,
                    sr_api.ServerPacket(
                        "UpdateCredentials",
                        serverConfig.extensionname,
                        {
                            ExtensionName: fieldsAsObject.extensionname,
                            CredentialName: fieldsAsObject["cred" + i + "name"],
                            CredentialValue: fieldsAsObject["cred" + i + "value"]
                        },

                    ));
            }
        }
        return false;
    }
    // ============================================================================
    //                           FUNCTION: StopServer
    // ============================================================================
    // Description: Stops the server, server will restart if started using nodemon.
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function StopServer (event)
    {
        event.preventDefault();
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "StopServer",
                serverConfig.extensionname,
            ));
        return false;
    }
    // ============================================================================
    //                           FUNCTION: RequestLoggingLevel
    // ============================================================================
    function RequestLoggingLevel ()
    {
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "RequestLoggingLevel",
                serverConfig.extensionname,
            ));
    }
    // test purposes only. 
    // can be sent from browser console.
    function testChatMessage (user, message)
    {
        // fake twitch chat message
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket("ChannelData",
                "twitchchat",
                sr_api.ExtensionPacket(
                    "ChatMessage",
                    "twitchchat",
                    {
                        channel: '#olddepressedgamer',
                        message: message,
                        data: {
                            'badge-info': { subscriber: '40' },
                            badges: { broadcaster: '1', subscriber: '3012' },
                            color: '#8A2BE2',
                            'display-name': user,
                            'emote-sets': '0,19313,1454048,1454049,1454050,300374282,300548761,390077889,461451828,472873131,477339272,488737509,537206155,564265402,592920959,610186276',
                            mod: false,
                            subscriber: true,
                            'user-type': null,
                            'badge-info-raw': 'subscriber/40',
                            'badges-raw': 'broadcaster/1,subscriber/3012',
                            username: user,
                            emotes: {},
                            'emotes-raw': null,
                            'message-type': 'chat'
                        }
                    },
                    'TWITCH_CHAT'
                ),
                'TWITCH_CHAT'
            ));
    }
    // ============================================================================
    //                           FUNCTION: heartBeat
    // ============================================================================
    heartBeatCallback()
    function heartBeatCallback ()
    {
        if (DataCenterSocket.connected)
        {
            document.getElementById('shutdownbutton').classList.add("btn-success");
            document.getElementById('shutdownbutton').classList.remove("btn-danger");
            document.getElementById('shutdownbutton').style.color = "green";
            document.getElementById('shutdownbuttonsvg').style.fill = "green"
        }
        else
        {
            document.getElementById('shutdownbutton').classList.add("btn-danger");
            document.getElementById('shutdownbutton').classList.remove("btn-success");
            document.getElementById('shutdownbutton').style.color = "red"
            document.getElementById('shutdownbuttonsvg').style.fill = "red"
        }
        localConfig.heartBeatHandle = setTimeout(heartBeatCallback, localConfig.heartBeatTimeout)
    }
    // ============================================================================
    //                           FUNCTION: Power Button
    // ============================================================================
    const powerbutton = document.getElementById('shutdownbutton_menu')
    powerbutton.addEventListener('click', function (e)
    {
        e.preventDefault(); // cancel the link behaviour
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(e.target.text,
                serverConfig.extensionname,
                e.target.text,
                "",
                ""
            ));
    });
</script>